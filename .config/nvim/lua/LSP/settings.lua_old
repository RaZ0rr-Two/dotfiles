
-- nvim-lsputils setup
vim.lsp.handlers['textDocument/codeAction'] = require'lsputil.codeAction'.code_action_handler
vim.lsp.handlers['textDocument/references'] = require'lsputil.locations'.references_handler
vim.lsp.handlers['textDocument/definition'] = require'lsputil.locations'.definition_handler
vim.lsp.handlers['textDocument/declaration'] = require'lsputil.locations'.declaration_handler
vim.lsp.handlers['textDocument/typeDefinition'] = require'lsputil.locations'.typeDefinition_handler
vim.lsp.handlers['textDocument/implementation'] = require'lsputil.locations'.implementation_handler
vim.lsp.handlers['textDocument/documentSymbol'] = require'lsputil.symbols'.document_handler
vim.lsp.handlers['workspace/symbol'] = require'lsputil.symbols'.workspace_handler

--##########################################################################################################
-- LSP Keybindings and completion---------------------------------------------------------------------------
--###################################################################################################################

local nvim_lsp = require('lspconfig')
local custom_attach = function(client, bufnr)
    print("LSP started.")
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    --vim.cmd('source lua/LSP/lsp-config.vim')
    -- Mappings.
    local opts = { noremap=true, silent=true }
    buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', '<C-K>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
    buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', '<space>d', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)

    -- Set some keybinds conditional on server capabilities
    if client.resolved_capabilities.document_formatting then
	buf_set_keymap("n", "<space>F", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
    end
    if client.resolved_capabilities.document_range_formatting then
	buf_set_keymap("v", "<space>f", "<cmd>lua vim.lsp.buf.range_formatting()<CR>", opts)
    end

    -- -- nvim-lsputils enhancements ######################################
    -- vim.lsp.handlers['textDocument/codeAction'] = require'lsputil.codeAction'.code_action_handler
    -- vim.lsp.handlers['textDocument/references'] = require'lsputil.locations'.references_handler
    -- vim.lsp.handlers['textDocument/definition'] = require'lsputil.locations'.definition_handler
    -- vim.lsp.handlers['textDocument/declaration'] = require'lsputil.locations'.declaration_handler
    -- vim.lsp.handlers['textDocument/typeDefinition'] = require'lsputil.locations'.typeDefinition_handler
    -- vim.lsp.handlers['textDocument/implementation'] = require'lsputil.locations'.implementation_handler
    -- vim.lsp.handlers['textDocument/documentSymbol'] = require'lsputil.symbols'.document_handler
    -- vim.lsp.handlers['workspace/symbol'] = require'lsputil.symbols'.workspace_handler

    -- nvim-illuminate enhancements #######################################
    require 'illuminate'.on_attach(client)

    vim.api.nvim_command [[ hi def link LspReferenceText Visual ]]
    vim.api.nvim_command [[ hi def link LspReferenceWrite Visual ]]
    vim.api.nvim_command [[ hi def link LspReferenceRead Visual ]]

    -- lsp-signature enhancements ######################################
    cfg = {
	bind = true, -- This is mandatory, otherwise border config won't get registered.
		   -- If you want to hook lspsaga or other signature handler, pls set to false
	doc_lines = 2, -- will show two lines of comment/doc(if there are more than two lines in doc, will be truncated);
		     -- set to 0 if you DO NOT want any API comments be shown
		     -- This setting only take effect in insert mode, it does not affect signature help in normal
		     -- mode, 10 by default

	floating_window = true, -- show hint in a floating window, set to false for virtual text only mode
	hint_enable = true, -- virtual hint enable
	hint_prefix = "üêº ",  -- Panda for parameter
	hint_scheme = "String",
	use_lspsaga = false,  -- set to true if you want to use lspsaga popup
	hi_parameter = "Search", -- how your parameter will be highlight
	max_height = 12, -- max height of signature floating_window, if content is more than max_height, you can scroll down
		       -- to view the hiding contents
	max_width = 120, -- max_width of signature floating_window, line will be wrapped if exceed max_width
	handler_opts = {
	border = "shadow"   -- double, single, shadow, none
	},
	extra_trigger_chars = {} -- Array of extra characters that will trigger signature completion, e.g., {"(", ","}
	-- deprecate !!
	-- decorator = {"`", "`"}  -- this is no longer needed as nvim give me a handler and it allow me to highlight active parameter in floating_window
    }

    require'lsp_signature'.on_attach(cfg)
end

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities.textDocument.completion.completionItem.snippetSupport = true
capabilities.textDocument.completion.completionItem.resolveSupport = {
  properties = {
    'documentation',
    'detail',
    'additionalTextEdits',
  }
}

--##########################################################################################################
-- General lang server setup -----------------------------------------
--###################################################################################################################

-- Use a loop to conveniently both setup defined servers 
-- and map buffer local keybindings when the language server attaches
local servers = { "bashls"}
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup { 
	--root_dir = vim.loop.cwd;
	capabilities = capabilities;
	on_attach = custom_attach;
  }
end
--nvim_lsp.bashls.setup{
--		filetypes = { "sh" , "zsh", "bash" };
--		--root_dir = vim.loop.cwd ;
--}


--##########################################################################################################
-- C++ config------------------------------------------
--###################################################################################################################

-- require('LSP/ccpp')
local cclscachepath = vim.fn.getenv("HOME").."/tmp/ccls-cache"
nvim_lsp.ccls.setup {
    init_options = {
	  --compilationDatabaseDirectory = "/home/ACM-Lab/Softwares/Installed/ccls/Debug" ;
	index = {
	    threads = 0;
	};
	clang = {
	    excludeArgs = { "-frounding-math"} ;
	    resourceDir = "/usr/lib/llvm-7/lib/clang/7.0.1/include" ;
	};
	cache = {
	    directory = cclscachepath 
	};
    };
    cmd = { 
	'ccls',  
	'--log-file=/tmp/ccls.log',
	'-v=1'
    };
    -- root_dir = require('lspconfig/util').root_pattern("compile_commands.json", "compile_flags.txt", ".ccls"),
    capabilities = capabilities;
    on_attach = custom_attach;
  --filetypes = { "c", "cpp", "objc", "objcpp" } ;
	--capabilities = capabilities ;
	--root_dir = vim.loop.cwd ;
	--root_dir = root_pattern("compile_commands.json", "compile_flags.txt", ".git", ".ccls") or '/home/ACM-Lab/.Test' ;
	--root_dir = {'echo', 'getcwd()'} ;
  -- "--log-file=/tmp/ccls.log -v=1"
}
